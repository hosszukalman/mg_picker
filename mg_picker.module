<?php
/**
 * @file
 * 
 * 
 *
 * @author KÃ¡lmÃ¡n Hosszu - hosszu.kalman@gmail.com
 */
 
/* ====================== */
/* ==== DRUPAL HOOKS ==== */
/* ====================== */

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function mg_picker_menu() {
  $items = array();

  $items['mg_picker/autocomplete'] = array(
    'title' => 'Media Gallery picker autocomplete',
    'description' => 'Form automplete callback, to get galleries.',
    'page callback' => 'pg_picker_gallery_autocomplete',
    'access callback' => 'media_access',
    'access arguments' => array('view'),
  );
  
  return $items;
}

/**
 * Implements hook_filter_info().
 */
function mg_picker_filter_info() {
  $filters = array();
  
  $filters['mg_picker'] = array(
    'title' => t('Media galleries'),
    'description' => t('Converts media galleries to a link.'),
    'process callback' => 'mg_picker_filter',
    'tips callback' => 'mg_picker_filter_tips', // @TODO not implemented
  );

  // If the WYSIWYG module is enabled, add additional help.
  if (module_exists('wysiwyg')) {
    $filters['mg_picker']['description'] .= ' ' . t('This must be enabled for the WYSIWYG integration to work correctly with this text filter.');
  }

  return $filters;
}

/**
 * Register a directory containing Wysiwyg plugins.
 *
 * @param $type
 *   The type of objects being collected: either 'plugins' or 'editors'.
 * @return
 *   A sub-directory of the implementing module that contains the corresponding
 *   plugin files. This directory must only contain integration files for
 *   Wysiwyg module.
 */
function mg_picker_wysiwyg_include_directory($type) {
  return $type;
}

/* ====================== */
/* == MODULE FUNCTIONS == */
/* ====================== */

/**
 * Create the filter process.
 *
 * @param string $text
 * @return
 *   The replaced string 
 */
function mg_picker_filter($text) {
  // Find and replace arrays.
  $search = array();
  $replace = array();
  
  // Regular expression
  $finds = preg_match_all('/\[mg_picker:([0-9]*)[^\]]*\]/', $text, $matches);
  
  if ($finds) {
    foreach ($matches[0] as $id => $full_pattern) {
      $render_link = NULL;
      $gallery_node = node_load($matches[1][$id]);
      
      // The default url, if fid not added
      $url = 'media-gallery/detail/' . $gallery_node->nid;
      
      // Findig a fid parameter
      if (preg_match('/fid:([0-9]*)/', $full_pattern, $fid_matches)) {
        // Load the file object
        $file = file_load($fid_matches[1]);
        
        // Render HTML
        $render_array = media_gallery_item_view($gallery_node, $file, 'media_gallery_block_thumbnail');
        $render_link = drupal_render($render_array);
      }
      
      // Add the patter and the link
      $search[] = $full_pattern;
      // If found render link
      if (!empty($render_link)) {
        $replace[] = $render_link;
      }
      else {
        $replace[] = l('Go to gallery', $url);
      }
    }
  }
  
  // Replace the finded patterns with the links
  return str_replace($search, $replace, $text);;
}

/**
 * Build mg_picker_gallery_search_form form.
 * 
 * @param array $form_state
 * @return
 *   The created form. 
 */
function mg_picker_gallery_search_form($form_state) {
  $form = array();

  $form['gallery_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Gallery'),
    '#description' => t('Type the title of the gallery, and the module will suggest the possibilities.'),
    '#autocomplete_path' => 'mg_picker/autocomplete',
  );
  
  $form['gallery_nid_submit'] = array(
    '#type' => 'submit',
    '#value' => t('OK'),
    '#ajax' => array(
      'callback' => 'mg_picker_get_images',
      'wrapper' => 'gallery-images',
      'effect' => 'fade',
    ),
  );
  
  // Container for just the gallery images.
  $form['gallery_image_wrapper'] = array(
    '#prefix' => '<div id="gallery-images">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Autocomplete maches to finding galleries.
 *
 * @param array $string 
 */
function pg_picker_gallery_autocomplete($string) {
  $matches = array();
  
  if ($string) {
    $result = db_select('node')
        ->fields('node', array('nid', 'title'))
        ->condition('title', '%' . db_like($string) . '%', 'LIKE')
        ->condition('type', 'media_gallery')
        ->range(0, 10)->execute();
    foreach ($result as $node) {
      $matches[$node->nid] = check_plain($node->title);
    }
  }

  drupal_json_output($matches);
}

function mg_picker_get_images($form, $form_state) {
  $out = '';
  
  $node = node_load($form_state['values']['gallery_nid']);
  
  if ($node->type == 'media_gallery') {
    $files = file_load_multiple(media_gallery_get_file_ids($node));
    
    // This is shit, use medi module's funcions. I need a list function what generates the html and attach JS.
    foreach ($files as $file) {
//      $elements = array(
//        '#theme' => 'media_thumbnail',
//        '#file' => $file,
//      );
//      $out .= drupal_render($elements);
    }
    
  }
  return $out;
}